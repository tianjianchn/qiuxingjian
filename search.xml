<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[工具利器 Visual Studio Code 之 Settings（二）]]></title>
    <url>%2Fvisual-studio-code-settings-2%2F</url>
    <content type="text"><![CDATA[上一篇我们分享了 Visual Studio Code 全局配置（User Setting）里有关工作台与窗口的部分配置。请记住全局配置的三项原则，尤其是第三项还要考虑那些会被临时打开的文件，尽量不要影响它们。今天我们主要讲下编辑器相关的配置。 单词分隔符支持中文符号&quot;editor.wordSeparators&quot;: &quot;`~!@#$%^&amp;*()-=+[{]}\\|;:&#39;\&quot;,.&lt;&gt;/！（）｛｝【】、；：’”，。《》？&quot;,默认情况下，单词分隔符都是英文符号，比如空格、,、. 等。当执行单词相关的导航或操作时，这些分隔符就派上用场了。比如双击选中单词、使用 Alt + 左右箭头进行单词之间的跳转。纯英文的文字自然不会有问题，但是当我们在用 VSCode 写 Markdown 中文文档或写中文注释时，这些操作往往就不准确了。导致我们不得不使用鼠标或触摸板拖动选取，比较麻烦。 就像下面这个中英文混合的文字，在默认配置下，如果双击“前端”这两个中文字符，则也会选中左侧的”Gateway“。Alt + 左右箭头进行单词之间跳转，也会包含这个英文。 而当我们加入中文符号作为单词分隔符后，再双击“前端”这两个中文字符，则不会选中左侧的”Gateway“，因为它被中文逗号分隔了。Alt + 左右箭头跳转也会以中文逗号为界了。 禁用缩略图&quot;editor.minimap.enabled&quot;: false,编辑器的右侧默认会展示文本内容的缩略图。初看还是很惊艳的，而且在特定情况下还蛮有用。由于它是一个缩略，相当于把文本内容等比例缩小，而且是缩得很小。当文本内容大体是很规整（比如对齐、有特定形状）的时候，很容易从缩略图里看到那些破坏规整的行。但是大部分情况下，我们并不需要它。它占用了窗口一块区域，导致可编辑区域缩小。当我们要在桌面开启多个 VSCode，或者使用多列布局的时候，空间就很受限制了。 修改 Tab 为两个空格123456&#123; "editor.tabSize": 2, "[python]": &#123; "editor.tabSize": 4, &#125;,&#125; 将 Tab 替换为空格可以保证在不同软件、平台里显示时不会有什么差异，因为 Tab 的渲染差异就可能比较大。VSCode 中默认 Tab 等价于四个空格。但是四个空格还是比较占用缩进空间。一般一行代码不宜过长，控制在 80-100 字符为好。在稍微复杂的程序里，如果有三四层缩进，那么光空格就占用了 16 个字符。而两个空格的缩进看起来也还是很有层次结构的，所以就不要浪费空间了。当然了，有些语言对缩进有特殊的要求。尤其像 Python，社区统一规范四个空格作为缩进。所以这里我们要对 Python 文件恢复使用四个空格。 自动折行&quot;editor.wordWrap&quot;: &quot;on&quot;,尽管我们应该在写代码时尽量控制一行的字符数（比如不超过 80-100），但文档、注释还是可能会有超长的情况，还有就是看一些不太讲究的源码的时候。水平滚动在大部分情况下都不是一个很友好的交互形式：一则需要我们额外用鼠标按住横向滚动条来拖动滚动条（触摸板虽然方便些，但并不适用所有场景）；二来个别的长行在拖动到后面时往往会让界面大部分留白，失去大量有效信息，降低阅读效率。还好，VSCode 在显示折行后，并不会平添新的行号，这样一定程度也有助于我们判断是否是多行还是自动折行了。 搜索时正则表达式支持正向、反向预查&quot;search.usePCRE2&quot;: true,正则表达式中所谓的预查，就是只匹配，但不输出到结果中。如 /(?&lt;=gate)way/.exec(&#39;gateway&#39;) 将得到 way，而不包含 gate。虽然 ECMA2018 已经支持反向预查（lookbehind），但是 VSCode（1.31） 中暂时还没有。如果搜索时使用了反向预查，则会报错。而当开启上述配置后，我们就能进行反向预查搜索了。 强制文件的换行符为 \n&quot;files.eol&quot;: &quot;\n&quot;,不同操作系统下的换行符都可能不一样，比如 Windows 下是 \r\n，而 Linux、macOS 是 \n。为了避免在不同环境下进行编辑时导致换行符的不一致，可以强制在 VSCode 中进行文件编辑时，使用统一的换行符。最好是用 \n，毕竟也节省了文件占用空间嘛。 还有其他一些全局配置，它们或跟插件相关，或跟语言、工程相关。在后续的具体场景中，会详细介绍它们的使用。接下来，我们将来看看如何利用 VSCode 最大化地方便 JavaScript 工程的编码。]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Tools</tag>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[macOS 下使用 CapsLock 键切换 ABC 与搜狗输入法]]></title>
    <url>%2Fmacos-capslock-switch-input-source%2F</url>
    <content type="text"><![CDATA[在 macOS 下，默认的英文输入法 ABC 是不能删除的。它不能像 Windows 下那样，只要有一个搜狗输入法，然后在它内部切换中英文就够了。macOS 就不得不涉及如何在两个输入法之间做切换了。系统默认的切换快捷键是 Command + Space（空格）。但使用这个快捷键并不太好，因为很多编程用的 IDE 会用到这个快捷键，比如像 Visual Studio Code 里的智能提示（IntelliSense）。所以，我一般使用 CapsLock 来作为输入法切换键——因为它使用的频率低、离手近按键快。 macOS Mojave 下使用系统自带支持可喜的是，在最新版的 macOS Mojave 下，已经默认支持了。 勾选后，只要按一下 CapsLock 就能在 ABC 和搜狗之间切换。而且长按就能激活大写——当然一般要输入大写，我感觉更方便地还是用左右 Shift 来输入，除非是要输入一长串大写字母（如全局变量）。 那么在 macOS High Sierra 和之前的版本里，该如何达到上述效果呢？有的同学可能有疑问，既然最新版已经实现了，为什么要讲旧版本呢？因为并不是所有人都愿意或立马升级到最新版。最新版在刚出来时，可能会有一些软件兼容性问题。比如这两天我就遇到了一个 VirtualBox 无法启动 macOS 虚拟机的问题。所以，对那些还留在旧版本的同学，我们还是有办法实现上述目标的，而且还是免费的，不用花钱、不用破解。关键就是 Karabiner Elements 这个软件。 macOS High Sierra 以下使用 Karabiner Elements 实现Karabiner Elements 是一款免费、开源的键盘定制化工具。可以通过 Homebrew 或前往官网（https://pqrs.org/osx/karabiner/）下载安装包进行安装。它可以自定义规则来修改按键定义，十分方便。这里我们的目标是改写 CapsLock 键——当单独按下 CapsLock 实体键，发送一个不占用任何按键的 F17；而当按下 fn + CapsLock 时，才是切换为大写状态。规则很简单，就是一个 JSON 配置：1234567891011121314151617181920212223242526272829303132333435363738394041&#123; "title": "Using caps_lock to switch input source, see https://blog.kiliwalk.com/macos-capslock-switch-input-source/", "author": "kiliwalk(tianjianchn@qq.com)", "homepage": "https://blog.kiliwalk.com", "manual": "https://blog.kiliwalk.com/macos-capslock-switch-input-source/", "import_url": "karabiner://karabiner/assets/complex_modifications/import?url=https://blog.kiliwalk.com/images/caps_lock_switch_input_source.json", "rules": [ &#123; "description": "Pressing caps_lock sends f17, pressing fn + caps_lock sends caps_lock", "manipulators": [ &#123; "from": &#123; "key_code": "caps_lock" &#125;, "to": [ &#123; "key_code": "f17" &#125; ], "type": "basic" &#125;, &#123; "from": &#123; "key_code": "caps_lock", "modifiers": &#123; "mandatory": [ "fn" ] &#125; &#125;, "to": [ &#123; "key_code": "caps_lock" &#125; ], "type": "basic" &#125; ] &#125; ]&#125; 首先要导入以上规则。有两种方法，一种是将以上内容保存为一个 JSON 文件（比如 caps_lock.json），然后复制到 ~/.config/karabiner/assets/complex_modifications 目录下。还有就是直接使用 Safari 或 Chrome 浏览器，打开这个网址：karabiner://karabiner/assets/complex_modifications/import?url=https://blog.kiliwalk.com/images/caps_lock_switch_input_source_v3.json，它会询问你是否启动 Karabiner Elements，确定后，就可以了。 接下来我们要应用这个规则。进入 Karabiner Elements Preferences -&gt; Complex Modifications -&gt; Rules，点击左下角的 Add rule，找到 Using caps_lock to switch input source... 这条规则，点击 Enable All 即可。 最后，我们还要去修改下系统里的切换输入法的快捷键（默认是 Command + Space）。前往 System Preferences -&gt; Keyboard -&gt; Shortcuts -&gt; Input Sources，选中 Select the previous input source（选择上一个输入法），点击右侧的按键区域，然后按下 CapsLock 实体键，此时上屏的是 F17。同时取消勾选 Select the next source in input menu（选择“输入法”菜单中的下一个输入法）。 这样，当我们按下 CapsLock 后，就能在搜狗和 ABC 之间进行切换了。如果需要大写，按下 fn + CapsLock 就可以。这里之所以不是用长按 CapsLock 进入大写，是 Karabiner Elements 的一些限制——配置复杂，且也不太稳定。 搜狗输入法配置除了系统层面快捷键的修改，搜狗输入法还要做一些调整。 按键配置里，中英文状态切换改为“禁用快捷键”。因为我们不需要用搜狗输入法的英文输入模式了。 按键配置里，把当前输入态提示改为“无提示”。避免在按 CapsLock 切换时，还在桌面右上角提示大写状态。 拒绝生活的惯性，挖掘那些被我们习以为常的工具]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Tools</tag>
        <tag>macOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[工具利器 Visual Studio Code 之 Settings（一）]]></title>
    <url>%2Fvisual-studio-code-settings-1%2F</url>
    <content type="text"><![CDATA[Visual Studio Code 虽说是一款轻量的 IDE，但是它的可定制性却非常强大。早先继承了 Web 开发的传统，它使用 JSON 来管理配置。用户也是直接操作 JSON 格式的配置内容。严格来说 JSON 不支持注释，但它额外有了一种叫 JSON with Comments 的格式，支持 JavaScript 的行内、单行、跨行注释语法。这样对我这样的开发人员来说，感觉就很良好了。 Visual Studio Code 的配置分全局（User Settings）和工作区（Workspace Settings）。全局是对所有工程、所有工作区都生效的。工作区的配置会覆盖全局配置中相同条目的内容。今天我们就主要来看看全局配置。 原则全局配置要有一定的规范，不能所有配置都需要、都能往里面加的。大概有三项原则： 将那些通用的、最广泛用到的配置放到这里。 尽量少，精简为上，不重复默认配置。 还要考虑那些会被临时打开的文件，尽量不要影响它们。 第一条、第二条我想大家都很容易理解，但第三条可能就不太注意了。由于开发工作中经常需要临时打开单个文件或目录，甚至还要去修改它们。这些临时打开的文件或目录并没有工作区配置，我们大概也不会想去为它们建一下工作区配置。这样，它们就只会应用全局配置了。所以在这里，我们有时候就要小心一点了。 工作台与窗口我们先来看看 Visual Studio Code 整个窗口与界面相关的定制。 使用先前的 JSON Editor 进行配置12345&#123; "workbench.settings.editor": "json", "workbench.settings.openDefaultSettings": true, "workbench.settings.useSplitJSON": true,&#125; Visual Studio Code 在后续的版本中，默认使用 UI Editor 来进行配置。它就跟传统的界面配置方式一样，有一些输入框、下拉框等。虽然看起来更加“友好”了，不过作为一个开发人员，我还是更喜欢先前的 JSON Editor。JSON Editor 非常强大，不光支持上面说的注释，它还支持智能提示（IntelliSense）、自动补全。配置项的搜索也非常智能。 显示文件相对路径&quot;window.title&quot;: &quot;${activeEditorMedium}${separator}${rootName}&quot;,默认窗口标题只展示当前文件名称、工作区名称。如果一个工程内有多个相同文件名的文件（在不同目录下），就不好区分了。而使用这个配置，就可以在窗口标题上展示文件相对工作区根目录的“相对路径”。让人惊喜的是，如果这个文件不是当前工作区的，则会显示它的完整路径，而不是各种 ..\.. 组成的相对路径了。 隐藏文件图标&quot;workbench.iconTheme&quot;: null,默认情况下，在 Visual Studio Code 的资源管理器（Explorer）里，文件前会展示一个彩色图标，表示其类型。看起来确实挺炫的，不过它一定程度上影响了文件树的结构表达。使用这个配置，就能恢复清爽了。 快速打开的文件不再是预览模式&quot;workbench.editor.enablePreviewFromQuickOpen&quot;: false,所谓预览模式或预览编辑器（Preview Editor），就是可以被复用的标签页。当我们对多个文件进行单击打开时，只会使用同一个编辑器（Editor）标签窗口，这样就可以避免标签过多导致体验太差。双击标签页或编辑一下文件，就可以固定标签页，不再被复用了。而快速打开（Quick Open）是利用快捷键（Command + P）搜索并打开一个文件。它默认也是预览模式。但我一般的使用场景是，通过快速打开、搜索文件，主要是为了对这些文件进行处理（如编辑）或较长时间的查看（如对比等），而且一般都是多个文件要连续打开。这个跟对多个文件单击进行逐一浏览、检查就不太一样了。这样就把我们的操作分成两部分，使工作更加具有条理。通过这个配置就可以关闭快速打开的预览模式。 自动定位当前文件在资源管理器中的位置&quot;explorer.autoReveal&quot;: false,当我们打开一个文件，或激活一个文件标签窗口时，Visual Studio Code 会把这个文件在资源管理器中的位置显示出来并选中它。也就是说会自动展开树结构。看起来还不错。但是当你在多个文件标签窗口切换的时候，你会发现左侧的资源管理器的树可能都被展开了。这要是在目录较多、文件较多的工程里，就像有人把你好好打扫整理的房间又弄乱了，那种心情~~~。这个选项配合快速打开，就能保证左侧的文件树总是保持我们关心、期望的展开状态。 下一篇我们将会介绍下 Editor 相关的设置。请记住，我们的三项原则。]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Tools</tag>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[macOS PDF 转图片小探]]></title>
    <url>%2Fmacos-pdf-to-images%2F</url>
    <content type="text"><![CDATA[前几天有个朋友咨询我这个“修电脑的”：如果要把一个内部 PDF 文件发给别人，如何脱敏？当然别人也是他的朋友，只是给他参阅下，并不是要发到公网上传播。最简单的办法就是用 PDF 编辑软件把敏感部分都擦除掉啦。然而他用的是 macOS，这类编辑软件基本都是收费的，他又不想为此特意花那个钱（好像找我帮忙没有成本一样╮(╯_╰)╭）。在远在未来的一顿饭的压迫下，我只能去尝试下免费的方法了。 PreviewmacOS 的 Preview 是一个很强大的 App，可以查看图片，甚至做一些简单的图片编辑工作。令人惊喜的，它也可以查看 PDF 并且做一些涂鸦。比如有这样一个 PDF 文件：如果要把右侧的 Adobe 标遮掉，可以打开 Show Mockup Toolbar，使用 Draw 工具进行涂抹。但是这种方法有一个弊端，就是 PDF 被再次打开后，涂鸦可以被删除。 一个办法就是把 PDF 文件转为图片。从 Preview 的菜单 File-&gt;Export，选择格式为 JPEG 即可。但这个办法只能将 PDF 的第一页输出为图片，无法满足我们的要求。 Automator无奈，去网上搜索了一番。无意间发现可以利用 macOS 的 Automator 来达到批量转换 PDF 所有页到图片。经过对 Automator、Apple Script 一番研究，较为满意实现了以下目标： 将 PDF 所有页都输出为图片 在 Finder 中集成右键菜单以便随时、快速地转换 这些图片可以输出在与 PDF 文件相同的文件夹下 首先创建一个 Quick Action 类型的 Document，然后配置其输入为 Finder 中的 PDF 文件。这样只有 PDF 文件，会在右键的 Quick Action 菜单有此服务了。接下来每个步骤介绍如下： Set Value of Variable：将选中的文件作为对象赋值到变量 file 上 Run AppleScript：获取选中文件所在文件夹 Set Value of Variable：将该文件夹设置到变量 filefolder 上 Get Value of Variable：将变量 file 上的文件作为下个步骤的输入。如果没有这一步，则 filefolder 会作为下个步骤的输入了。 Render PDF Pages as Images：将 PDF 文件的每一页输出为图片。这一步就是我们要的批量处理。 Move Finder Items：将上述图片文件移动到 filefolder 变量所指向的文件夹中，也就是跟源文件相同的目录中。因为上一步默认会把图片存在 /private/var/folders 的某个目录下。 然后将此 Document 保存，名称可以取为 PDF to Images。我们可以看看具体使用办法： 但是这个办法还是有一个问题没法解决——有些 PDF 文件设置了导出密码。必须把密码清除了，才能使用 Automator 来处理。如果不知道密码，那就行不通了。 截图那还有其他什么办法吗？截图！当然，不是说手动一张一张去截屏，而是有一个 App 就叫“截图（Jietu）”。它支持滚动截图，而且是免费的。但是这个滚动截图功能在某些情况会漏掉或重复截屏。也可能因为这样，所以最新的 2.2.2 版本也没有了这个功能。不过还好我有 2.2.1 版本的。用 Preview 打开 PDF 文件后，利用滚动截屏功能顺利地截取到了所有页面的一个长图。没有遗漏或重复，当然也有可能是 PDF 文件页数比较少。好几十页乃至上百页的还没有测试过。 到这里，总算可以交差了。然而事情并没有结束。当我尝试对十几页的长图片用 Preview 预览，放大时竟然无法正常显示内容（可能由于图片太大的缘故）。于是我又脑洞地把这张长图转为了 PDF。这样的 PDF 只有一页，这一页的中间就是一个细长条的图片，必须放大后才能看清。嗯，把这样的 PDF 发出去，自然也增加了阅读成本，这大概也可以算是脱敏的一部分吧:) 希望朋友不要忘记这一顿饭。]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Tools</tag>
        <tag>macOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NodeJS Docker 打包优化]]></title>
    <url>%2Fnodejs-docker-optimize%2F</url>
    <content type="text"><![CDATA[最近 NodeJS 后端工程的 Docker 打包优化工作总算告一段落了。其实去年 12 月份就开始试点改造，期间遇到了很难复现的间歇性 socket hang up 问题，不得不延后。上周终于抽出时间全力排查了下，发现是升级 NodeJS 到 6.15.0 后，其有一个 HTTP Keep-alive 连接超时的 Bug。不得不感慨：这小版本升级也要格外小心啊。 回到正题。在确认没有其他附带问题后，在试点的基础上，又增加了一些新的目标。总的目标大概如下： 支持优雅停机，要求 Node 进程能够接收到 SIGTERM 软终止信号 提升打包速度，充分利用 Docker Layer 缓存机制，降低 yarn install、node_modules 拷贝等高 IO 动作的运行频率 保证源代码安全，不要将源代码打包到镜像里 尽可能降低最终镜像大小，不要包含不必要的文件（如 node_modules 中的 devDependencies） 下面从各个目标一一介绍下我们的优化实践之路。 基础镜像设置由于之前的基础镜像使用的是 FROM node:6，只有 major version，没有指定 minor version、patch version。当该基础镜像 minor 或 patch 版本更新后，如果本地的镜像缓存也被清除了，那么打包就会使用新版本的基础镜像。这也是上面不经意升级到 node 6.15.0 的原因。所以这里我们限定了基础镜像的全版本：FROM node:6.16.0。 我们的产品主要在国内使用，运维人员也都是在国内。为了更方便查看日志中的时间、方便程序中的日期计算，把时区调整为北京时区（即东八区）：RUN rm /etc/localtime &amp;&amp; echo &quot;Asia/Shanghai&quot; &gt; /etc/timezone &amp;&amp; dpkg-reconfigure -f noninteractive tzdata。注意，Debian Stretch 版本后需要 rm /etc/localtime，否则时区修改可能无法生效（被替换回原值）。 最后设置镜像的工作目录：WORKDIR /app。这样，我们新的基础镜像就完成了。 支持优雅停机优雅停机（Gracefully Shutdown），就是当应用（进程）要被关闭时，首先会被发送一个软终止信号。应用在收到这个信号后，执行清理工作，然后自行退出。如果在指定的时间内没有自行退出，则会被强制关闭——这自然就不优雅了。这个软终止信号一般就是指 SIGTERM。NodeJS 进程默认会对 SIGTERM 信号进行响应，执行进程退出。但是默认的监听程序并不会执行清理工作。我们需要显式监听该信号，并在清理完毕后执行 process.exit(0) 以退出进程。 然而，在 Docker 容器里实现优雅停机会有一些新的问题需要面对。当使用 docker stop 停止一个容器时，docker 会首先发送一个 SIGTERM 信号给容器内的 PID=1 进程，也就是常说的 init 进程。如果 PID=1 进程没有在规定时间（一般 10 秒）内退出，则 docker 会发送 SIGKILL 信号强制退出容器内的所有进程。PID=1 进程比较特殊，在 linux 下，它会忽略所有默认的信号监听程序，也就是说收到 SIGTERM 默认不会退出。所以，我们的 PID=1 进程要求能显式监听 SIGTERM 并执行后续动作。 然而，当我们使用 shell form 的 ENTRYPOINT 或 CMD 指令时——如 CMD npm run start，Docker 容器会默认启用一个 Shell 来运行后面的指令。此时 PID=1 进程是 /bin/sh，完整的运行命令是 /bin/sh -c &#39;npm run start&#39;。当 sh 收到 SIGTERM 信号时，它自身并不会退出。因为 sh 并没有显式监听 SIGTERM，默认的信号处理器被忽略了。自然 sh 内部也不会把信号转发给子进程。最后只会超时，继而被 SIGKILL 强制关闭。 Docker 推荐我们用 exec form 的 ENTRYPOINT 或 CMD 指令，如 CMD [&quot;npm&quot;, &quot;run&quot;, &quot;start&quot;]。这样 PID=1 进程就是 npm 了，不再有 sh 进程了。但继续用 npm scripts 会不会还有问题？这就依赖 Host 环境了。我们来看一下 npm scripts 的运行原理。以 npm run start 为例，在运行时，首先会起一个 npm 进程。npm 进程会 spawn() 一个 /bin/sh 进程（/bin/sh -c），执行 start script 的内容（通常就是 node xxx.js）。这样就形成了三个进程构成的进程树，分别是 npm、sh、node。当 npm 进程收到 SIGTERM 信号时，它内部已经监听 SIGTERM，其逻辑就是转发给子进程，也就是 sh 进程。sh 进程收到信号后退出，接着 npm 也退出了。但是，剩下的 node 进程并没有收到信号，它被忽略了，继而被 Docker 直接 SIGKILL。看起来完全不行嘛，那为什么说依赖 Host 环境呢？因为中间这个 sh 进程在 bash 里（/bin/sh 指向 bash），是有可能不存在的。是不是很神奇？当使用 -c 运行命令时，bash 会判断是否需要 fork() 当前进程以产生一个新的进程来执行该命令。当 -c 命令不包含复杂的结构，如多个命令连接（&amp;&amp;、||）、重定向（&gt;）等情况时，bash 不会 fork() 出新的子进程，而是直接使用 exec() 替换当前进程。而 node:6 Docker 镜像所用的 Debian Stretch 操作系统，/bin/sh 默认指向的是 dash，而不是 bash。所以在这里，我们最好也不要用 npm scripts。 那我们就只剩一个选项了：直接将 node 作为 PID=1 的进程，如 CMD [&quot;node&quot;, &quot;dist/server.js&quot;]。虽然说 PID=1 的进程还要处理僵尸进程（Zombie Process），但我们这里基本上不会有，也就可以不考虑了。 yarn install 优化这方面最基础的一个优化就是利用 Docker Layer 缓存特性，降低 yarn install 的发生次数。123# 在 package.json、yarn.lock 没有变化的情况下，后面的 yarn install 会直接复用上次打包的缓存结果COPY package.json yarn.lockRUN yarn install --frozen-lockfile 要注意的一个问题是，yarn 会在其他位置建立依赖缓存（cache）。可以用 yarn cache clean 来移除缓存。不过我们这里并没有用，因为后面的改造方式让我们不需要它了。 我们的工程依赖里有私有 Git 仓库，如 &quot;js-util&quot;: &quot;git+ssh://git@gitlab.xxx.com:yyy/library/js-util.git#v2&quot;。我们原先的 CI 过程，是在宿主机上先安装依赖，然后把整个 node_modules 拷贝到 Docker Server 端中进行打包。宿主机有 SSH Key（一般就是 Gitlab Deploy Key，注意不要加密码，否则无法在 non-interactive shell 下使用），下载私有 Git 仓库不会有权限问题，但是就无法利用上述的缓存优化了。鱼和熊掌不可兼得，那就选中间。如果我们把 SSH Key 也打包到镜像里呢？那就太不安全了。那把它从镜像里又删除呢？可惜还是有安全隐患——Docker 的 Union FS 机制会导致这些文件还存在于原来的 Layer 里。 解决这个问题没有特别完美的方法。可以尝试提供一个内网的 SSH Key 在线下载地址，使用一个 RUN 指令完成 wget、ssh-add、yarn install、rm 等一系列操作，保证没有任何一个 Layer 会留存 SSH Key。而我们这里采用的是 Multi Stage Build——多阶段打包机制。在阶段一，复制 SSH Key，获取 Gitlab 服务器的公钥，并执行 yarn install。在阶段二，把阶段一打包出来的内容复制过来，注意这里不要复制 SSH Key。123456789101112# 构建时需要执行的指令FROM node:6.16.0 as buildWORKDIR /appCOPY .ssh /root/.ssh/RUN chmod 600 /root/.ssh/id_rsa &amp;&amp; ssh-keyscan gitlab.xxx.com &gt; /root/.ssh/known_hostsCOPY package.json yarn.lock ./RUN yarn install --frozen-lockfile# 运行时需要执行的指令FROM node:6.16.0 as runtimeWORKDIR /appCOPY --from=build /app/node_modules /app/node_modules/ 这样，阶段二打包出来的最终镜像，就没有 SSH Key 了。至于阶段一的 .ssh 目录，可以在调用 docker build 之前，从 $HOME/.ssh/id_rsa 上复制到当前目录，可千万别上传到 Git 仓库哦。 打包速度优化在充分利用 Docker Layer 缓存机制的基础上，我们需要把那些不容易产生变更的指令放到上面、把不容易产生变更的部分剥离出来。像 WORKDIR、CMD、ENV、还有一些环境配置指令，都可以放到前面。把文件复制过程中，不容易产生变更的文件单独抽离出来，形成一个新的 COPY 指令，尽量避免 COPY . /p/a/t/h/ 这样的复制方式。说到 COPY，还要注意其跟 Linux cp 命令有一些不一样的地方。当复制一个目录时，COPY 是将这个目录下的所有文件复制到目标文件夹下，而不是把这个目录自身复制到目标文件夹中。 源代码安全在最终的镜像里，最好不要包括源代码，而只有 Transpile、Uglify 甚至是 Minify 后的代码。我们使用 npm run build 来做这些转换工作，它会把 src 源代码目录，转换到 dist 目录。使用上面的多阶段打包，只要在第二阶段 COPY dist 目录即可。 镜像大小优化最终打包出来的镜像大小，除了基础镜像 node:6.16.0 占用大部分空间外，剩下的主要就是 node_modules 目录了——大概有 200-300MB。我们可以考虑把 devDependencies 从 node_modules 中删除来减少大小。再增加一条指令：RUN yarn install --production 即可。然而我们并没有这样做，主要有这两个原因： 我们在注册了 postinstall npm scripts，它依赖一些 devDpendencies。 由于还有 npm run build，它所依赖的 babel 都是 devDpendencies。由于它必须在 COPY 源代码之后运行，意味着只要源代码有变化，npm run build 就会被执行。那还在它后面的 yarn install --production 自然也会被再次执行，可能就会影响打包效率了。 上下文目录优化docker build -t xxx .，最后的那个 . 就表示上下文目录位置（. 就是当前目录）。docker build 是在 go 语言写的一个本地服务端上运行。所以一开始需要把上下文目录打包发送到服务端，然后在服务端内解压，再运行各个指令，生成最终的镜像。这样我们的上下文目录就不能太大，不然 IO 吃不消。我们可以用 .dockerignore 文件来限制上下文目录只包含哪些文件。为了得到一个比较通用的 .dockerignore 文件，我们主要使用排除法规则。排除那些容器运行时不需要的文件；排除那些不会在多阶段打包过程中使用的中间文件，如 node_modules、dist。示例 .dockerignore 文件如下：1234567891011*!package.json!yarn.lock!src!bin!test!gulpfile.js!.babel*!.eslint*!.nycrc!.ssh 最终的 Dockerfile把上面各个改造结合在一起，我们的 Dockerfile 就出炉啦！还有一些小细节，期待你自己的发现哦。 12345678910111213141516171819202122232425262728293031323334353637383940414243############################################# 构建阶段############################################FROM node:6.16.0 as buildWORKDIR /app# 运行 docker build 前需要把 SSH Keys 复制到当前目录下的 .ssh 中，并在 build 完后删除COPY .ssh /root/.ssh/RUN chmod 600 /root/.ssh/id_rsa &amp;&amp; ssh-keyscan gitlab.xxx.com &gt; /root/.ssh/known_hosts# 在 package.json、yarn.lock 没有变化的情况下，yarn install 会复用上次的缓存结果COPY package.json yarn.lock ./RUN yarn install --frozen-lockfile# 注意使用 .dockerignore 来屏蔽掉不必要的文件COPY . ./RUN npm run lint &amp;&amp; npm run build &amp;&amp; npm run test############################################# 运行时，也即最终的 Image 内容############################################FROM node:6.16.0 as runtimeWORKDIR /app# 第一行，设置时区为北京时区（东八区）# 第二行，解决 npm log 日志中掺杂命令行控制符导致日志解析、匹配困难的问题RUN rm /etc/localtime &amp;&amp; echo "Asia/Shanghai" &gt; /etc/timezone &amp;&amp; dpkg-reconfigure -f noninteractive tzdata \ &amp;&amp; npm config set color falseENV NODE_ENV="production" # 不要使用 npm，也不要用 shell form，避免 node 进程无法收到 SIGTERM 信号。ENTRYPOINT ["node"]CMD ["dist/server.js"]# 运行时需要的文件COPY --from=build /app/package.json /app/yarn.lock ./COPY --from=build /app/node_modules /app/node_modules/COPY --from=build /app/dist /app/dist/]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Nodejs</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微前端实践]]></title>
    <url>%2Fmicro-frontend-practice%2F</url>
    <content type="text"><![CDATA[在 toB 的前端开发工作中，我们往往就会遇到如下困境： 工程越来越大，打包越来越慢 团队人员多，产品功能复杂，代码冲突频繁、影响面大 内心想做 SaaS 产品，但客户总是要做定制化 不同的团队可能有不同的方法去解决这些问题。在前端开发日新月异、前端工程化蓬勃发展的今天，我想给大家介绍下另一种尝试——微前端。 微前端是什么那什么是微前端？微前端主要是借鉴后端微服务的概念。简单地说，就是将一个巨无霸（Monolith）的前端工程拆分成一个一个的小工程。别小看这些小工程，它们也是“麻雀虽小，五脏俱全”，完全具备独立的开发、运行能力。整个系统就将由这些小工程协同合作，实现所有页面的展示与交互。 可以跟微服务这么对比着去理解： 微服务 微前端 一个微服务就是由一组接口构成，接口地址一般是 URL。当微服务收到一个接口的请求时，会进行路由找到相应的逻辑，输出响应内容。 一个微前端则是由一组页面构成，页面地址也是 URL。当微前端收到一个页面 URL 的请求时，会进行路由找到相应的组件，渲染页面内容。 后端微服务会有一个网关，作为单一入口接收所有的客户端接口请求，根据接口 URL 与服务的匹配关系，路由到对应的服务。 微前端则会有一个加载器，作为单一入口接收所有页面 URL 的访问，根据页面 URL 与微前端的匹配关系，选择加载对应的微前端，由该微前端进行进行路由响应 URL。 这里要注意跟 iframe 实现页面嵌入机制的区别。微前端没有用到 iframe，它很纯粹地利用 JavaScript、MVVM 等技术来实现页面加载。后面我们将介绍相关的技术实现。 为什么要用微前端在介绍具体的改造方式之前，我想跟大家先说明下我们当时面临的问题，以及改造后的对比，以便大家以此为对照，评判或决定使用。主要包括打包速度、页面加载速度、多人多地协作、SaaS 产品定制化、产品拆分这几个角度。 首先是打包速度。在 6 个月前，我们的 B 端工程那会儿还是一个 Monolith。当时已经有 20 多个依赖、60 多个公共组件、200 多个页面，对接 700 多个接口。我们使用了 Webpack 2，并启用 DLL Plugin、HappyPack 4。在我的个人主机上使用 4 线程编译，大概要 5 分钟。而如果不拆分，算下来现在我们已经有近 400 个页面，对接1000 多个接口。这个时间意味着什么？它不仅会耽误我们开发人员的时间，还会影响整个团队的效率。上线时，在 Docker、CI 等环境下，耗时还会被延长。如果部署后出几个 Bug，要线上立即修复，那就不知道要熬到几点了。在使用微前端改造后，目前我们已经有 26 个微前端工程，平均打包时间在 30-45 秒之间（注意，这里还没有应用 DLL + HappyPack）。 页面加载速度其实影响到并不是很大，因为经过 CDN、gzip 后，资源的大小还能接受。这里只是给大家看一些直观的数据变化。6 个月前，打包生成的 app.js 有 5MB（gzip 后 1MB），vendor.js 有 2MB（gzip 后 700KB），app.css 有 1.5MB（gzip 后 250KB）。这样首屏大概要传输 2MB 的内容。拆分后，目前首屏只需要传输 800KB 左右。 在协作上，我们在全国有三个地方的前端团队，这么多人在同一个工程里开发，遭遇代码冲突的概率会很频繁，而且冲突的影响面比较大。如果代码中出现问题，导致 CI 失败，所有其他人的代码提交与更新也都会被阻塞。使用微前端后，这样的风险就平摊到各个工程上去了。 再者就是定制化了。我们做的额是一款 toB 的产品，做成 SaaS 标准版产品大概是所有从业者的愿望。但整体市场环境与产品功能所限，经常要面临一些客户要求做本地化与定制化的要求。本地化就会有代码安全方面的考量，最好是不给客户源代码，最差则是只给客户购买功能的源代码。而定制化从易到难则可以分为独立新模块、改造现有模块、替换现有模块。通过微前端技术，我们可以很容易达到本地化代码安全的下限——只给客户他所购买的模块的前端源码。定制化里最简单的独立新模块也变得简单：交付团队增加一个新的微前端工程即可，不需要揉进现有研发工程中，不占用研发团队资源。而定制化中的改造现有模块也可以比较好地实现：比如说某个标准版的页面中需要增加一个面板，则可以通过一个新的微前端工程，同样响应该页面的 URL（当然要控制好顺序），在页面的恰当位置插入一个新的 DOM 节点即可。 最后就是产品拆分方面的考量了。我们的产品比较大，有几块功能比较独立、有特色。如果说将来需要独立成一个子产品，有微前端拆分作为铺垫，腾挪组合也会变得更加容易些。 其他目标有了以上的一些原因与诉求，在决定进行微前端改造前，还需要设定一些额外的小目标： 不能对现有的前端开发方式带来太大变化，至少要有平滑过渡的机制。 每个为前端工程都要求可以独立运行，至少在本地开发时要能做到。 微前端在加载时，要实现预加载，并可以自由调整预加载顺序，甚至是根据用户的偏好来实现智能化、个性化的加载顺序。 如何改造现有工程“Talk is cheap，show me the code“。下面就让我们一起来看看具体的改造吧！我们的微前端工程可以划分为 portal 工程、业务工程、common 工程这几类。 portal 工程portal，顾名思义，就是入口。这也就是上面所说的微前端加载器。当用户打开浏览器，首次进入我们的页面时，不管是什么 URL，首先加载的就是 portal。portal 里会配置所有业务工程的地址、匹配哪些 URL、需要加载哪些资源。如：123456789// 业务工程的名称customer: &#123; // URL 匹配模式 matchUrlHash: ['^/customer'], // 微前端地址 target: 'http://localhost:8101/mfe-customer/index.html', // 资源匹配模式 resourcePatterns: ['/app.*.css$', '/vendor.*.css$', '/manifest.*.js$', '/vendor.*.js$', '/app.*.js$'],&#125; portal 会定时、异步、并发地下载业务工程的资源，并将它们进行注册，此时并不会加载这些业务工程。这里之所以要业务工程的地址（target）、资源（resourcePatterns），是为了加载时确定地知道其所包含的 app.js、vendor.js、app.css 等资源的路径。因为业务工程每次有变更，app.js 等资源路径上都会带有新的文件内容哈希值（Hash），导致路径不可预测。而它的 index.html 的路径是固定的。我们读取该 HTML，解析其内容，通过正则就能匹配到 app.js 等资源的路径。 portal 在运行时，会监听 URL 变化。目前我们只支持 URL Hash（如 #/customer）。当 Hash 发生变更时，匹配到业务工程，然后执行卸载、加载的工作。这个机制主要是利用 single-spa 来实现，但原理就是这么简单。12345678910111213141516import &#123; registerApplication &#125; from 'single-spa';registerApplication('customer', // 下载微前端工程，获取三个函数钩子：bootstrap、mount、unmount () =&gt; &#123; const html = fetch(mfeConfig.target); const &#123;cssUrls, jsUrls&#125; = match(html, mfeConfig.resourcePatterns); loadCss(cssUrls); loadJs(jsUrls); return windows['mfe:customer']; &#125;, // 对当前浏览器 URL Hash 进行匹配，如果匹配（返回 true），则加载该微前端（调用 mount）；否则卸载（调用 unmount） () =&gt; &#123; return match(window.location.hash, mfeConfig.matchUrlHash); &#125;, mfeConfig.customProps); 业务工程业务工程就是普通的微前端工程，一般一个模块一个工程。业务工程要扮演两个角色，一个是可独立运行的前端工程，一个是受 portal 控制的运行时。前者主要用于我们本地开发，后者则是线上集成时使用。在独立运行时，它跟原来的前端工程没有什么区别。以 Vue 工程为例，照样使用 new Vue({el: &#39;#app&#39;}) 来启动、渲染页面。12345678new Vue(&#123; el: '#app', i18n, router, store, template: '&lt;App/&gt;', components: &#123; App &#125;&#125;); 而当受控运行时，则是利用 UMD 方式输出几个钩子函数，包括初始化、加载、卸载。123456789101112131415161718if(!window.IS_IN_MFE)&#123; // 独立运行时 new Vue(&#123;...&#125;)&#125; else &#123; // 受控运行时 module.exports = &#123; bootstrap()&#123; // 注册时执行 &#125;, mount(customProps)&#123; // 加载时执行 return Promise.resolve().then(()=&gt;&#123; instance = new Vue(&#123;...&#125;) &#125;) &#125;, unmount()&#123; // 卸载时执行 return Promise.resolve().then(()=&gt;&#123; instance.$destroy() &#125;) &#125; &#125;&#125; 线上环境的 Webpack 配置：1234output: &#123; libraryTarget: "umd", library: 'mfe:customer'&#125; 而区分是否受控，则可以通过判断一个全局变量来实现。如 window.IS_IN_MFE，portal 工程在运行时会将其设置为 true。 为了支持本地多个工程同时开发，我们需要为每个微前端工程指定一个确定的、独占的端口号。比如从 8100 开始，逐一递增。同时，为了支持线上部署，我们还需要给每个微前端工程指定一个确定的、独占的基础路径（前缀）。这样相同域名下可以用不同路径进行独立访问。路径统一以 /mfe- 开头，如 /mfe-customer。这也就是上面 portal 里业务工程的配置示例里所展现的那样。 特殊业务工程：mfe-navs我们产品的页面结构分为顶部栏、侧边栏、中间内容区三大块。顶部栏和侧边栏在页面跳转过程中，基本上保持不变。所以我们也将它们剥离出来作为一个独立的微前端业务工程，叫做 mfe-navs。它会匹配所有的 URL，也就是说访问任意 URL 时，都会加载它，而且还要保证先加载它。当它加载完毕后，会在页面内提供一个中间内容区的锚点 DOM（#app：），供其他业务工程加载时挂载。 Common 工程上面可以看到，每一个业务工程都是一个独立的前端工程，所以里面会有一些相同的依赖，如 Vue、moment、lodash 等。如果将这些内容都打包到各自的 vendor.js 里，则势必会导致代码冗余太多，浏览器运行内存压力增大。我们把这些公共依赖、公共组件、CSS、Fonts 等都放到一个工程里，由该工程进行打包，将依赖、组件 export，并以 UMD 的方式注入到全局。 main.js：12345678910111213import Vue from 'vue'; // 公共依赖import VueRouter from 'vue-router';import VueI18n from 'vue-i18n';import '@/css/icon-font/iconfont.css';import ContentSelector from '@/components/ContentSelector'; // 公共组件Vue.use(VueI18n); // 大家都要这么做，我们就代劳吧！module.exports = &#123; 'vue': Vue, 'vue-router': VueRouter, 'content-selector': ContentSelector,&#125;; Webpack 配置：1234output: &#123; libraryTarget: "umd", library: 'mfe:common'&#125; 业务工程则通过 Webpack 外部依赖（external）的方式引入到工程中。这样业务工程打包时就不会包含这些公共代码了。123456789101112var externalModules = ['vue', 'vue-router', 'content-selector'];module.exports = &#123; // webpack 配置项 // ... externals: (context, request, callback)=&gt;&#123; if(externalModules.includes(request))&#123; callback(null, 'root window["mfe:common"]["'+request+'"]') &#125; else &#123; callback(); &#125; &#125;,&#125; 结语以上就是我们微前端改造与实践方面的一些经验。前路漫漫，这里面还存在很多待完善的地方，如 History 模式支持、i18n 更好地集成、各个业务工程的加载顺序优化及个性化等。除了这些纯粹技术上的探索，在拥有微前端、微服务这些架构的基础上，团队也可以考虑进行垂直拆分：一个小组独立负责一块业务，它有自己的微前端工程和微服务工程。从技术管理到人员管理，将它们糅合在一起统一考虑，这也是我们软件工程的探索方向。期待这些能够对大家带来一些思考和帮助！]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>Coding</tag>
        <tag>Frontend</tag>
        <tag>Architecture</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[工具利器之 Visual Studio Code（一）]]></title>
    <url>%2Ftool-sharp-of-visual-studio-code-1%2F</url>
    <content type="text"><![CDATA[前面的文章《我看开发》中提到要从工具、编码、设计上去提升我们的开发水平。今天我们就先从 Visual Studio Code 这款编程开发软件来看看工具方面的实践。 Visual Studio Code 是微软推出的一款开源、轻量、跨平台、主要面向 Web 开发的 IDE（集成开发环境）。它是基于 Chrome + NodeJS 这种 Web Hybrid 方案实现的，有别于传统的那些基于本地 Native 开发的 IDE，如 Visual Studio、Eclipse、XCode 等。说得更通俗一点，它其实就是浏览器里的网页。通过这种方式，可以充分利用现有的网页前端开发资源，更加方便进行插件开发与扩展。在这样一款现代、高效的工具面前，有许多值得我们去学习、打磨的地方，以便更加充分地利用它来提高我们的开发工作、甚至是日常工作的效率。 下面，我将从 Markdown、快捷键与命令、搜索与替换、正则表达式几个比较重要、提效迅速的方面来说一下。 MarkdownVSCode 默认将 .md 后缀的文件识别为 Markdown 语言，支持 Markdown 预览。而且它还支持 Markdown inline 渲染，边编辑边渲染，实时检查、展示语法效果。代码工程里经常有各类文档文件，如 README.md、CHANGELOG.md，这样也可以直接在 VSCode 里进行编辑了。同时由于它的轻量、跨平台性，还可以用来做笔记或个人数据管理。推荐大家在 Gitlab.com 上创建一个私有仓库（免费），专用存储自己的工作笔记、个人数据，并使用 VSCode 来管理、编辑，这样既可很方便地做数据同步、又能解决笔记编辑器的问题，不比那些免费或收费的专业笔记软件差。为了保证 Markdown 语法的兼容性，最好确保在编辑 Markdown 文件时，制表符长度为 4 个空格。可以在 User Settings 里按如下配置：123&quot;[markdown]&quot;: &#123; &quot;editor.tabSize&quot;: 4&#125; 快捷键与命令VSCode 借鉴了很多其他编辑器的优秀快捷键，比如 Sublime Text。利用好快捷键能让我们尽量减少鼠标、触摸板的使用，可以让代码、文档编写工作事半功倍。好用的快捷键很多，但一开始不宜接触太多。我选择了几个效果特别好的给大家介绍下。以下快捷键主要以 macOS 为例，Windows、Linux 大体相同，但是在 Control、Command 之间存在一些不同，请自行搜索、尝试。 选中文本的操作： Command + D：选中下一个跟已选中文本相同的文本。比如要选中本文内的所有 Code，则可以先双击选中其中一个，接着一直按 Command + D。每按一次就能选中下一个 Code。此时对某个选中的 Code，可以进行编辑，比如改成 Code It。这样所有已选中的 Code 都会被替换成 Code It。这个命令在我们写代码做重构时特别好用，不用再去用文件内搜索、定位，然后一个一个替换了。 Shift + Command + L：选中所有跟已选中文本相同的文本。跟 Command + D 类似。它特别适合搭配文件内搜索、全局搜索一起使用。当我们想要用正则表达式替换文件内的某些文本，正则匹配好写、正则替换困难或不想写的情况下，可以直接选中所有匹配的文本，直接进行文字编辑。 行的操作： Control + J：将下一行合并到当前行，即取消当前行的换行符。连续使用，效果更棒，尤其是想把多行代码合并为一行的时候。 Shift + Command + ↓：“复制”当前行为下一行。它的好处是不会占用系统剪贴板，这样剪贴板里的内容还是可以继续粘贴。 Shift + Command + K：删除当前行。它跟 Command + X 的区别是，后者会将当前行复制到剪贴板再删除。 Command + ↑/↓：移动当前行到上一行前面或下一行后面。 光标定位： Control + A 或 Command + ←：定位到行首 Control + E 或 Command + →：定位到行末 Alt + ←/→：定位到前一个词组或后一个词组 搜索与替换VSCode 的文件内搜索与替换很好用，直接 Command + F 就可以唤起搜索。这里我要介绍的是全局搜索。当我们要对多个文件、目录、工程进行文字搜索、替换时，尤其好用。譬如我们要替换多个工程同一个依赖的版本号，可以使用如下方法： 如果这些工程在同一个目录下，那么使用 VSCode 打开该父目录即可。如果不在，可以开一个新的 VSCode 实例，使用 File-&gt;Add Folder to Workspace 将这些工程加到同一个 Workspace 里 Shift + Command + F 打开全局搜索侧边栏，输入你要检索的文本。 还可以限定文件。比如只对多个工程里的 package.json 进行查找。此时展开搜索框，在 files to include 里写入 package.json 即可。 回车开始搜索。VSCode 会在下方展示出所有的匹配内容，以文件为组分隔。 点击匹配到的内容，则会打开该文件，此时可以进行手动替换。当然，也可以使用全局替换。 VSCode 最近的更新（1.30.1）也支持多行文本的全局替换了！搜索框内支持回车（但是要按 Shift + Enter），这样多行文本的搜索也很好用了，不能更赞！（想当初我还不得不用 Python 命令行脚本去解决这个需求） 关于正则表达式最后，我想额外提一下正则表达式。正则表达式不仅是编程时可能需要用到，我们正常的文本编辑其实用到的机会会更多，尤其是在进行搜索、替换时。很多人调侃：“正则我每次只要半个小时就会”。的确，简单的正则，如 .*、\d、\w，网上有很多文章介绍使用。甚至一些较为复杂的也能通过谷歌搜索得到。但是之所以能忍受 每次 都花“半个小时”去搜索，就是没有经常使用的缘故。反过来说，如果经常使用，也就不需要花那“半个小时”去搜索了。所以，在进行代码编辑、文档处理或者其他任务时，多使用编辑器提供给我们的正则表达式搜索与替换的能力，会让我们对它自然熟悉。 结语VSCode 还有很多地方值得我们深入探索，包括常用插件、工程配置等。它是我们的开发工作、日常工作的效率倍增器，一定要多加思考、多加练习、多加利用。磨刀不误砍柴工。很多时候我们不知道自己的刀快不快，看到别人砍柴快了，也许我们就知道该怎么做了。希望这些技巧能能带动大家“磨刀”的兴趣。]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Tools</tag>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我看开发]]></title>
    <url>%2Fthe-developer-i-want%2F</url>
    <content type="text"><![CDATA[哪些能力是一位优秀的开发人员在技术上应该具备的？这是一个老生常谈的问题。就像很多人简历里所描述的，“解决问题能力强”、”善于学习“、”积极思考“，以及各种“精通某某某”等。毋庸置疑，能做到这些的人的确可以称得上“优秀”。但我总感觉它们就像散落一地的珍珠，缺少那么一根线来串起来。我想要一个具有提纲掣领的评判依据，甚至在这个纲领下，能够从一种更高的高度去引导我们开发人员的发展方向，更好地帮助他们进行技能学习。在这些年的研发、面试、技术管理工作中，我更倾向于从以下三个角度去认识一位开发人员：工具、编码、设计。 工具所谓工具，就是指开发人员对他们用以编程的各种软件、系统，高效率使用、定制化扩展的能力，甚至还包括创造这些辅助软件的能力。马克思曾说，人与动物的区别是制造和使用工具。孔子也有言，工欲善其事，必先利其器。我们不光要使用工具，还要去改进工具，甚至通过工具去制造更加高级的工具。大部分情况下，我们能够做到使用工具，使用一些大众知晓、团队统一的工具。但很多时候，我们对这些工具的使用方式容易形成惯性，对一些没有效率的细节习以为常。即便某些时候，感觉到某些不方便，还是不以为意，不去想是否可以改进。甚至在目前的工具下无法很好、很快地完成某项任务时，我们还会在心里抱怨那些提出这个任务的人。 为什么会有这些问题存在呢？我想，可能是我们自己都忽视了，软件开发这项工作，可以说是世界上最具灵活性、扩展性的工作了。它可以以成本非常低廉的方式进行自我进化！在我们开发软件的过程中，可以先开发出额外的软件用以帮助我们的开发工作。如此往复，递归推进，没有哪一个行业具备这样的发展方式。身处其中的我们，很有必要认识到这一点。 所以这里把工具放到第一位，是因为它所表现出来的能力水平，往往可以作为一个开发人员是否”觉醒着“的标记。一个对工具没有认识的人，更可能是一个在开发工作中因循守旧、缺乏生机的人。天花板不高，发展潜力有限。而一个能把工具更高效地利用好的人，相信在接下来的编码、设计方面，也能有更好地表现。 工具不仅包括跟开发直接相关的部分，如操作系统、IDE、浏览器、命令行、需求管理、版本管理等，还包括日常生活中会使用到的各种软件或服务，如即时通讯、日程管理、邮箱、文件管理、翻译等。除了这些已有的软件或服务外，对一些通用的功能概念也要烂熟于心，如正则表达式、通用文本编辑快捷键等。再者就是对于需要再造工具的场景，要会使用一些脚本语言自行编写，如 Bash、Python、JavaScript。这些脚本语言的运用，自然也需要在编码上下一番功夫。 编码编码，这大概是开发人员觉得自己最有把握的事情了。编码不就是把功能需求用一门高级语言实现出来嘛！实现的细节不就是各种 if、for、赋值等语句的组装嘛！而且，最终用户可能只关心整个系统的功能是否正常，他们不会关心内部是怎样去实现的。“功能正常”，这既是最高的要求，却往往也是最低的要求。作为开发者，要认识到仅仅让功能正常也许比较简单，但实现时粗糙的编码可能会藏有各种难以发现的问题。这样在某一时刻或情景下，“功能正常”也就无法保证。就像《The Art of Computer Programming》这本书名所表示的那样，如果我们把编程当做一门艺术，抱着雕琢自己作品的态度去面对代码，就不会仅仅只局限于它的外在，而不在乎其内在了。 然而在编码这件事上，很多人又容易走极端，极尽所能地去研究那些奇技淫巧，甚至以此作为炫耀的资本。比如利用运算符优先级编写极其复杂的计算表达式、利用语言特性实现极其难以理解的逻辑。每一门语言都有一些犄角旮旯的特性，甚至有所不足或缺陷。但在我们正常的开发工作中，应该尽量去避免触碰这些陷阱。把那些绕脑的、存在歧义的语法与写法通通扔掉。多去研究那些更加现代、安全、人性化的表达方式。 好的编码，首先风格就很不一样。一个具有良好目录组织结构的工程、一段具有良好命名的代码，都会让人看起来赏心悦目、心旷神怡。然后就是对语言层面各种语法要运用自如。对各种高级语法的底层实现要抱有一颗求索的心，甚至由此追溯到汇编、机器码乃至计算机硬件。还有安全性、性能、扩展性等各个方面。而后面这些，其实就已经上升到设计层面了。 设计那什么是设计呢？如果把编码看做”行（xíng）“，那么设计就是”思“。行成于思毁于随，还要三思而后行。”思“，首先要从业务、产品的高度上进行求证：这个功能它的目的是什么？它的工作场景是什么？它有无存在的必要或者改善的可能？其次就是从使用者的角度换位思考：如果我是用户，我需要的是什么？我会如何去做某件事？我完成的效率能否提升？最后就是我们的技术上考量：数据结构该如何去设计？如何应对可能的修改？如何保证程序的健壮性？如何应对高并发的场景？等等，不一而足。良好的设计能够让我们规避代码修改的泥淖、跳过未知缺陷的深渊。 希望通过工具、编码、设计这么一根准绳，穿入我们日常的开发工作中，能够让我们时刻保持清醒、明确的研究思路，握紧发展的方向舵。祝愿大家！]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>Coding</tag>
        <tag>Think</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Turn over a new leaf]]></title>
    <url>%2Fturn-over-a-new-leaf%2F</url>
    <content type="text"><![CDATA[时隔近十年，心里又重新动起了写点文字的念头。倒不是说要达到著书立说的高度，而是觉得把东西公开写出来，比自己私下做些日记或笔记会更多一点东西。在一定程度上，它可以促使我以更加严谨地态度去对待经验。虽然是我个人的经验，但可能对别人也会有一些用，满足一下虚荣❤。 作为一个 Web 开发程序员，技术肯定会比较多地谈及。但互联网上已经有千千万万地技术分享、讨论，重复或原创，应接不暇。而我的初心，绝不想做完全重复的事情–像所谓布道士一样去无限强调某种东西来做宣传。我所要谈的内容，只是代表我自己，抑或可能存在的某一些人，以某种思维方式去理解的技术。也许比较粗浅，甚至存在错漏，但没关系，至少它描绘了我学习、成长的轨迹。 除了技术上的内容，偶尔可能还会夹杂一些“无聊”的东西，譬如随想、生活经验、音乐分享之类。总而言之，这个博客，它将不存在一个明显的主线：零零碎碎，甚至杂乱无章。但是这些我选择发表出来的东西，它们构成了一个一个重要的时间节点。若干年后，当我回顾时，这便是我的人生学习轨迹！乃至激励我：人生不止，奋斗不息！]]></content>
      <categories>
        <category>Misc</category>
      </categories>
      <tags>
        <tag>Misc</tag>
      </tags>
  </entry>
</search>
